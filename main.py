import cv2 as cv
import numpy as np
from fastapi import FastAPI, Response, UploadFile
from pydantic import BaseModel

app = FastAPI()


class Boxes(BaseModel):
    boxes: list[tuple[int, int, int, int]] = [(1, 1, 1, 1), (1, 1, 1, 1)]


# Função para calcular a distância entre dois pontos
def distancia(pt1, pt2):
    return np.sqrt((pt1[0] - pt2[0]) ** 2 + (pt1[1] - pt2[1]) ** 2)


def get_bounding_boxes(img: np.ndarray, template: np.ndarray, threshold: float) -> list:
    w, h = template.shape[::-1]

    img_gray = cv.cvtColor(img, cv.COLOR_BGR2GRAY)
    res = cv.matchTemplate(img_gray, template, cv.TM_CCOEFF_NORMED)
    loc = np.where(res >= threshold)
    boxes = []

    # Processar cada ponto encontrado
    for pt in zip(*loc[::-1]):
        # Verificar se o ponto está muito próximo de algum ponto já processado
        if all(distancia(pt, p) > 100 for p in boxes):  # Limiar de distância = 10 pixels
            box = (pt[0], pt[1], pt[0] + w, pt[1] + h)
            boxes.append(box)
    return boxes


async def read_image(image: UploadFile, flags: int) -> np.ndarray:
    image_contents = await image.read()
    image_arr = np.fromstring(image_contents, np.uint8)
    img = cv.imdecode(image_arr, flags=flags)
    assert img is not None, "file could not be read, check with os.path.exists()"
    return img


# TODO: Como posso colocar n templates?
# TODO: Incluir o modelo treinado.


@app.post("/find_boxes/")
async def find_boxes(test_image: UploadFile, box_image: UploadFile, threshold: float = 0.5) -> Boxes:
    img_rgb = await read_image(test_image, flags=cv.IMREAD_COLOR)
    template = await read_image(box_image, flags=cv.IMREAD_GRAYSCALE)

    boxes = get_bounding_boxes(img_rgb, template, threshold)

    return {"boxes": boxes}


@app.post(
    "/mark_boxes/",  # Set what the media type will be in the autogenerated OpenAPI specification.
    # fastapi.tiangolo.com/advanced/additional-responses/#additional-media-types-for-the-main-response
    responses={200: {"content": {"image/png": {}}}},
    # Prevent FastAPI from adding "application/json" as an additional
    # response media type in the autogenerated OpenAPI specification.
    # https://github.com/tiangolo/fastapi/issues/3258
    response_class=Response,
)
async def mark_boxes(test_image: UploadFile, box_image: UploadFile, threshold: float = 0.5):
    img_rgb = await read_image(test_image, flags=cv.IMREAD_COLOR)
    template = await read_image(box_image, flags=cv.IMREAD_GRAYSCALE)

    boxes = get_bounding_boxes(img_rgb, template, threshold)

    for box in boxes:
        cv.rectangle(img_rgb, (box[0], box[1]), (box[2], box[3]), (0, 0, 255), 2)

    _, encoded_img = cv.imencode(".PNG", img_rgb)

    return Response(content=encoded_img.tostring(), media_type="image/png")
